{"version":3,"sources":["models/Graph.ts","util/graph-string.ts","Components/GraphD3/util.js","Components/GraphD3/GraphD3.tsx","Components/ValidatedGraphInput/ValidatedGraphInput.tsx","Pages/MainPage/MainPage.tsx","App.tsx","reportWebVitals.ts","index.tsx","Pages/MainPage/MainPage.module.scss"],"names":["Node","data","color","adjacent","this","node","push","Graph","nodes","Map","get","set","source","destination","sourceNode","addNode","destinationNode","addAdjacent","cloneDeep","visited","forEach","item","has","depthFirstSearch","size","entryNode","entries","next","value","isRedBlueAux","nextColor","isRedBlue","GRAPH_REGEX","parseGraphfromString","str","graph","basicGraph","links","Set","replaceAll","split","reduce","acc","g","link","filter","x","index","length","parseBasicGraphFromString","l","addEdge","renderGraph","container","containerRect","current","getBoundingClientRect","height","width","getNodes","add","name","parseBasicGraphFromGraph","Array","from","map","target","getGraphD3FromGraph","innerHTML","simulation","d3","force","id","d","strength","svg","append","attr","selectAll","join","Math","sqrt","label","enter","text","on","y","destroy","stop","GraphD3","props","containerRef","React","useRef","className","useEffect","destroyFn","ref","memo","ValidatedGraphInput","onChange","labelClass","lable","handleChange","e","replace","match","arg","validateGraphInputString","htmlFor","type","MainPage","useState","graphString","setGraphString","isConnected","setIsConnected","setIsRedBlue","undefined","throttledGraphData","setThrottledGraphData","throttledEffect","useCallback","throttle","isConnectedGraph","Styles","hint","graphInput","result","graphContainer","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.2dac11e5.chunk.js","sourcesContent":["import { cloneDeep } from \"lodash\";\n\nexport type RedBlue = \"RED\" | \"BLUE\";\nexport class Node<Char> {\n  data: Char;\n  color?: RedBlue;\n  adjacent: Node<Char>[];\n\n  constructor(data: Char) {\n    this.data = data;\n    this.adjacent = [];\n  }\n\n  addAdjacent(node: Node<Char>): void {\n    this.adjacent.push(node);\n  }\n}\n\nexport default class Graph<T> {\n  private nodes: Map<T, Node<T>> = new Map();\n\n  /**\n   * Add a new node if it was not added before\n   *\n   * @param {T} data\n   * @returns {Node<T>}\n   */\n  addNode(data: T): Node<T> {\n    let node = this.nodes.get(data);\n\n    if (node) return node;\n\n    node = new Node(data);\n    this.nodes.set(data, node);\n    return node;\n  }\n\n  /**\n   * Create an edge between two nodes\n   *\n   * @param {T} source\n   * @param {T} destination\n   */\n  addEdge(source: T, destination: T): void {\n    const sourceNode = this.addNode(source);\n    const destinationNode = this.addNode(destination);\n\n    sourceNode.addAdjacent(destinationNode);\n    destinationNode.addAdjacent(sourceNode);\n  }\n\n  getNodes() {\n    return cloneDeep(this.nodes);\n  }\n\n  /**\n   * Depth-first search\n   *\n   * @param {T} data\n   * @param {Map<String, boolean>} visited\n   * @returns\n   */\n  private depthFirstSearch(node: Node<T>, visited: Map<T, boolean>): void {\n    if (!node) return;\n\n    visited.set(node.data, true);\n    node.adjacent.forEach((item) => {\n      if (!visited.has(item.data)) {\n        this.depthFirstSearch(item, visited);\n      }\n    });\n  }\n\n  isConnectedGraph() {\n    if (this.nodes.size === 0) {\n      return true;\n    }\n    const visited: Map<T, boolean> = new Map();\n\n    const entryNode = this.nodes.get(this.nodes.entries().next().value[0]);\n    if (entryNode) {\n      this.depthFirstSearch(entryNode, visited);\n\n      if (visited.size === this.nodes.size) return true;\n      return false;\n    }\n    return false;\n  }\n\n  isRedBlue(): boolean {\n    if (this.nodes.size === 0) {\n      return true;\n    }\n\n    const entryNode = this.nodes.get(this.nodes.entries().next().value[0]);\n    if (entryNode) {\n      return this.isRedBlueAux(entryNode);\n    }\n    return true;\n  }\n  isRedBlueAux(entryNode: Node<T>, nextColor: RedBlue = \"RED\"): boolean {\n    entryNode.color = nextColor;\n    nextColor = nextColor === \"RED\" ? \"BLUE\" : \"RED\";\n    let isRedBlue = true;\n    entryNode.adjacent.forEach((node) => {\n      if (node.color === entryNode.color) {\n        isRedBlue = false;\n      } else if (node.color === nextColor) {\n        isRedBlue = true;\n      } else {\n        isRedBlue = this.isRedBlueAux(node, nextColor);\n      }\n    });\n    return isRedBlue;\n  }\n}\n","import { replace } from \"lodash\";\nimport Graph, { RedBlue } from \"../models/Graph\";\n\nexport const GRAPH_REGEX = /([^-, ][^-,])/g;\n\ninterface BasicNode {\n  name: string;\n  color?: RedBlue;\n}\n\n/**\n *\n * Helper Interface for D3\n *\n *  */\ninterface BasicGraph<T, S = T> {\n  links: S[][];\n  nodes: Set<T>;\n}\n\nexport function validateGraphInputString(str: string): string {\n  // Remove All whitespaces which are not after a comma (for better display)\n  str = str.replaceAll(/[^, ] /g, \"\");\n  // Ensure that input in correct format\n  return replace(str, GRAPH_REGEX, (match, arg) => match.split(\"\").join(\"-\"));\n}\n\nexport function parseBasicGraphFromString(str: string): BasicGraph<string> {\n  if (!str) {\n    return {\n      links: [],\n      nodes: new Set(),\n    };\n  }\n  str = str.replaceAll(\" \", \"\");\n  let links: string[][] = [];\n  let nodes = new Set(\n    str.split(\",\").reduce((acc: string[], g: string) => {\n      if (!g) {\n        return acc;\n      }\n      const link = g.split(\"-\").filter((x) => x);\n\n      for (let index = 0; index < link.length - 1; index++) {\n        links = [...links, [link[index], link[index + 1]]];\n      }\n      return [...acc, ...link];\n    }, [])\n  );\n\n  return {\n    links,\n    nodes,\n  };\n}\n\nexport function parseGraphfromString(str: string): Graph<string> {\n  if (!str) {\n    return new Graph<string>();\n  }\n  const graph = new Graph<string>();\n  const basicGraph = parseBasicGraphFromString(str);\n  basicGraph.nodes.forEach((x) => graph.addNode(x));\n  basicGraph.links.forEach((l) => {\n    graph.addEdge(l[0], l[1]);\n  });\n  return graph;\n}\n\nexport function parseBasicGraphFromGraph(\n  graph: Graph<string>\n): BasicGraph<BasicNode, string> {\n  const nodes = new Set<BasicNode>();\n  const links: string[][] = [];\n  const visited = new Map<string, boolean>();\n  graph.getNodes().forEach((x) => {\n    visited.set(x.data, true);\n    nodes.add({ name: x.data, color: x.color });\n    x.adjacent.forEach((l) => {\n      if (!visited.has(l.data)) {\n        links.push([x.data, l.data]);\n      }\n    });\n  });\n  return {\n    nodes,\n    links,\n  };\n}\n","import * as d3 from \"d3\";\nimport { parseBasicGraphFromGraph } from \"../../util/graph-string\";\n\n/**\n * Render the D3 Graph\n * @param {React.MutableRefObject} container\n * @param {Graph<string>} data\n */\nexport function renderGraph(container, data) {\n  const containerRect = container.current?.getBoundingClientRect();\n\n  const height = containerRect?.height || 0;\n  const width = containerRect?.width || 0;\n  const { links, nodes } = getGraphD3FromGraph(data);\n  const name = (d) => {\n    return d.name;\n  };\n  const color = (d) => {\n    return d.color === \"RED\" ? \"#F00\" : \"#00F\";\n  };\n  container.current.innerHTML = \"\";\n  const simulation = d3\n    .forceSimulation(nodes)\n    .force(\n      \"link\",\n      d3.forceLink(links).id((d) => d.name)\n    )\n    .force(\"charge\", d3.forceManyBody().strength(-150))\n    .force(\"x\", d3.forceX())\n    .force(\"y\", d3.forceY());\n  const svg = d3\n    .select(container.current)\n    .append(\"svg\")\n    .attr(\"viewBox\", [-width / 2, -height / 2, width, height]);\n\n  const link = svg\n    .append(\"g\")\n    .attr(\"stroke\", \"#999\")\n    .attr(\"stroke-opacity\", 1)\n    .selectAll(\"line\")\n    .data(links)\n    .join(\"line\")\n    .attr(\"stroke-width\", (d) => Math.sqrt(d.value));\n\n  const node = svg\n    .append(\"g\")\n    .attr(\"stroke\", \"#fff\")\n    .attr(\"stroke-width\", 2)\n    .selectAll(\"circle\")\n    .data(nodes)\n    .join(\"circle\")\n    .attr(\"r\", 12)\n    .attr(\"fill\", color);\n\n  const label = svg\n    .append(\"g\")\n    .attr(\"class\", \"labels\")\n    .selectAll(\"text\")\n    .data(nodes)\n    .enter()\n    .append(\"text\")\n    .attr(\"text-anchor\", \"middle\")\n    .attr(\"dominant-baseline\", \"central\")\n    .text((d) => {\n      return name(d);\n    });\n\n  simulation.on(\"tick\", () => {\n    //update link positions\n    link\n      .attr(\"x1\", (d) => d.source.x)\n      .attr(\"y1\", (d) => d.source.y)\n      .attr(\"x2\", (d) => d.target.x)\n      .attr(\"y2\", (d) => d.target.y);\n\n    // update node positions\n    node.attr(\"cx\", (d) => d.x).attr(\"cy\", (d) => d.y);\n\n    // update label positions\n    label\n      .attr(\"x\", (d) => {\n        return d.x;\n      })\n      .attr(\"y\", (d) => {\n        return d.y;\n      });\n  });\n\n  return {\n    destroy: () => {\n      simulation.stop();\n    },\n    nodes: () => {\n      return svg.node();\n    },\n  };\n}\n\n/**\n * Adapt Graph to D3 Node/Link struct\n * @param {Graph<string>} data\n */\nfunction getGraphD3FromGraph(data) {\n  let graph = parseBasicGraphFromGraph(data);\n  const nodes = Array.from(graph.nodes);\n  return {\n    nodes,\n    links: graph.links.map((x) => ({\n      target: x[0],\n      source: x[1],\n    })),\n  };\n}\n","import React, { useEffect } from \"react\";\nimport Graph from \"../../models/Graph.js\";\nimport { renderGraph } from \"./util.js\";\n\ninterface GraphProps {\n  data?: Graph<string>;\n  className?: string;\n}\nfunction GraphD3(props: GraphProps) {\n  const containerRef = React.useRef(null);\n  const { data, className } = props;\n  useEffect(() => {\n    let destroyFn;\n\n    if (containerRef.current && data) {\n      const { destroy } = renderGraph(containerRef, data);\n      destroyFn = destroy;\n    }\n\n    return destroyFn;\n  }, [data]);\n  return <div className={className} ref={containerRef}></div>;\n}\n\nexport default React.memo(GraphD3);\n","import React, { InputHTMLAttributes } from \"react\";\nimport { validateGraphInputString } from \"../../util/graph-string\";\n\ninterface ValidatedGraphInputProps\n  extends InputHTMLAttributes<HTMLInputElement> {\n  labelClass?: string;\n  lable?: string;\n}\nexport default function ValidatedGraphInput(props: ValidatedGraphInputProps) {\n  const { onChange, value, labelClass, lable } = props;\n\n  // Handle Change\n  function handleChange(e: React.ChangeEvent<HTMLInputElement>) {\n    let str = e.target.value;\n    e.target.value = validateGraphInputString(str);\n    onChange && onChange(e);\n  }\n\n  return (\n    <>\n      {lable && (\n        <label htmlFor=\"validated-input\" className={labelClass}>\n          {lable}\n        </label>\n      )}\n      <input\n        {...props}\n        type=\"text\"\n        id=\"validated-input\"\n        value={value}\n        onChange={(e) => handleChange(e)}\n      />\n    </>\n  );\n}\n","import { throttle } from \"lodash\";\nimport React, { useCallback, useEffect, useState } from \"react\";\nimport GraphD3 from \"../../Components/GraphD3\";\n\nimport ValidatedGraphInput from \"../../Components/ValidatedGraphInput\";\nimport Graph from \"../../models/Graph\";\nimport { parseGraphfromString } from \"../../util/graph-string\";\nimport Styles from \"./MainPage.module.scss\";\n\nexport default function MainPage() {\n  const [graphString, setGraphString] = useState<string>(\"\");\n\n  const [isConnected, setIsConnected] = useState<boolean>(true);\n  const [isRedBlue, setIsRedBlue] = useState(true);\n\n  const [throttledGraphData, setThrottledGraphData] = useState<\n    Graph<string> | undefined\n  >(undefined);\n  // Throttle the Function\n  const throttledEffect = useCallback(\n    throttle((str) => {\n      const graph = parseGraphfromString(str);\n      setIsConnected(graph.isConnectedGraph());\n      setIsRedBlue(graph.isRedBlue());\n      setThrottledGraphData(graph);\n    }, 1000),\n    []\n  );\n\n  useEffect(() => {\n    throttledEffect(graphString);\n    return () => {};\n  }, [graphString]);\n  return (\n    <div className={Styles.MainPage}>\n      <div>\n        <ValidatedGraphInput\n          onChange={(e) => setGraphString(e.target.value)}\n          value={graphString}\n          name=\"graph-input\"\n          lable=\"type your graph string (x-x-....-x, x-x-....-x, ...):\"\n          labelClass={Styles.hint}\n          className={Styles.graphInput}\n        ></ValidatedGraphInput>\n        {graphString && (\n          <ul className={Styles.result}>\n            <li>\n              The Graph is:&nbsp;\n              {isConnected ? \"connected\" : \"disconnected\"}\n            </li>\n            <li>\n              The Graph is:&nbsp;\n              {isRedBlue ? \"red-blue\" : \"not red-blue\"}\n            </li>\n          </ul>\n        )}\n      </div>\n      <GraphD3\n        data={throttledGraphData}\n        className={Styles.graphContainer}\n      ></GraphD3>\n    </div>\n  );\n}\n","import React from \"react\";\n\nimport \"./App.scss\";\nimport MainPage from \"./Pages/MainPage\";\n\nfunction App() {\n  return <MainPage></MainPage>;\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"MainPage\":\"MainPage_MainPage__3VN5S\",\"hint\":\"MainPage_hint__3JJQE\",\"graphInput\":\"MainPage_graphInput__1QDwH\",\"graphContainer\":\"MainPage_graphContainer__1bCBn\",\"result\":\"MainPage_result__103Nb\"};"],"sourceRoot":""}